# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DVR_Form.ui'
#
# Created by: PyQt5 UI code generator 5.9.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
import time
import math
import numpy as np
import pickle
import cv2
import socket
import sys

import matplotlib.pyplot as plt
from Equipment_States import Equipment_state

camera_num = 16
# from IPython import get_ipython
# get_ipython().run_line_magic('matplotlib', 'qt')
plt.ion()

temperature = np.zeros([camera_num, 24, 32])
print(len(temperature))
buf_socket_rx = []
for i in range(camera_num):
    buf_socket_rx.append([])
for i in range(camera_num):
    buf_socket_rx[i].append(0xAA)
    for j in range((24 * 32)):
        buf_socket_rx[i].append(0x00)
    buf_socket_rx[i].append(0xBB)

print_mode = 0  # 0 = temperture # 1 = ascii

min_temp = 15.00
max_temp = 35.00

# heatmap = np.zeros([24*8,32*8,3])


from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
# Qt: v 5.9.7 	PyQt: v 5.9.2
from matplotlib.backends.backend_qt5agg import FigureCanvas as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure

# matplotlib.__version__ 3.4.3

app = QApplication([])

thread = QThread()

ClientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)


class Worker(QObject):
    def __init__(self, parent=None):
        QObject.__init__(self, parent=parent)

    def get_temperature(self):
        global ClientSocket
        global buf_socket_rx
        global temperature
        # global canvas, chart

        ClientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_host = '192.168.0.22'
        server_port = 9999
        rx_array = []

        fps = 0
        now_time = time.time()
        while True:
            try:
                ClientSocket.connect((server_host, server_port))

                rx_time_out = time.time()
                while True:
                    rx_char = ClientSocket.recv(1)
                    if len(rx_char) != 0:
                        rx_array.append(rx_char[0])
                        # print(rx_char[0])
                        rx_time_out = time.time()

                    if len(rx_array) >= (2 * ((24 * 32) + 1 + 2)):
                        if (rx_array[0] * 0x10 + rx_array[1]) == 0xAA and (
                                rx_array[2 * ((24 * 32) + 1 + 1)] * 0x10 + rx_array[
                            2 * ((24 * 32) + 1 + 1) + 1]) == 0xBB and (
                                rx_array[2 * ((24 * 32) + 1)] * 0x10 + rx_array[2 * ((24 * 32) + 1) + 1]) <= 0b1111:
                            # tempture <- rx_array
                            # print((rx_array[2*((24*32)+1)] * 0x10 + rx_array[2*((24*32)+1) + 1]))
                            # print(time.time())

                            slave_address = (rx_array[2 * ((24 * 32) + 1)] * 0x10 + rx_array[2 * ((24 * 32) + 1) + 1])
                            for i in range(24 * 32):
                                buf_socket_rx[slave_address][1 + i] = (
                                            rx_array[2 * (1 + i)] * 0x10 + rx_array[2 * (1 + i) + 1])

                            for h in range(24):
                                for w in range(32):
                                    # temperature[h,w] = (float(buf_socket_rx[0][1+(h*32 + w)])) - 40.0;
                                    temperature[slave_address][h, w] = (float(
                                        buf_socket_rx[slave_address][1 + (h * 32 + w)])) - 40.0;

                            if slave_address == 0b0000:
                                fps = (0.5 * fps) + (0.5 * (1 / (time.time() - now_time)))
                                print(str(fps))
                                now_time = time.time()

                            rx_array = []
                        else:
                            rx_array = rx_array[1:]

                    if time.time() > (rx_time_out + 60.0):
                        break

                ClientSocket.close()
            except:
                # print('No response from server: ' + str(server_host) + ':' + str(server_port))
                # time.sleep(1.0)
                #
                # if time.time() > (rx_time_out + 60.0):
                #     ClientSocket.close()
                #     break
                print("waiting")


worker = Worker()
worker.moveToThread(thread)
thread.started.connect(worker.get_temperature)


### worker get equipment data

thread_get_data = QThread()
import  random
class Worker_get_data(QObject):
    def __init__(self, parent=None):
        QObject.__init__(self, parent=parent)
        self.temp = list(range(camera_num))
        self.volt1 = list(range(camera_num))
        self.volt2 = list(range(camera_num))
        self.current = list(range(camera_num))


    def get_temperature(self):   ### 반드시 str값!!!
        while True:
            for i in range(camera_num):
                time.sleep(0.2)
                ui.lbl_temp[i].setText(str(random.randint(16,34)))
                time.sleep(0.2)
                ui.lbl_volt1[i].setText(str(random.randint(16,34)))
                time.sleep(0.2)
                ui.lbl_volt2[i].setText(str(random.randint(16,34)))
                time.sleep(0.2)
                ui.lbl_current[i].setText(str(random.randint(16,34)))
                time.sleep(0.2)
                if int(ui.lbl_temp[i].text()) >= 25:
                    ui.lbl_prob_chk[i].setStyleSheet("background-color: rgb(255, 0, 0);")
                else:
                    ui.lbl_prob_chk[i].setStyleSheet("background-color: rgb(255, 255, 255);")

worker_get_data = Worker_get_data()
worker_get_data.moveToThread(thread_get_data)
thread_get_data.started.connect(worker_get_data.get_temperature)





thread_draw_chart = []
# for i in range(camera_num):
for i in range(len(temperature)):
    print("temperature length : ", len(temperature))
    thread_draw_chart.append(QThread())
    print("Thread draw chart ", i, "생성")


### Drawing Canvas
canvas = []
chart = []
for i in range(camera_num):
    canvas.append(FigureCanvas(Figure(figsize=(10, 6),tight_layout=True)))
    # canvas.append(FigureCanvas(Figure(figsize=(10, 6))))
    chart.append(canvas[i].figure.add_subplot())


    heatmap_zero = np.zeros((24 * 8, 32 * 8))

    chart[i].clear()
    chart[i].get_xaxis().set_visible(False)
    chart[i].get_yaxis().set_visible(False)
    chart[i].imshow(heatmap_zero, cmap='jet', vmin=min_temp, vmax=max_temp)

    print("canvas ", i , "생성")
    canvas[i].draw()

class Worker2(QObject):
    def __init__(self, parent=None, cam_num = 0):
        QObject.__init__(self, parent=parent)
        self.cam_num = cam_num

    def display_plot(self):
        while True:
            try:
                self.temperature_upscale = cv2.resize(temperature[self.cam_num], None, fx=8, fy=8, interpolation=cv2.INTER_CUBIC)
                self.temperature_upscale = cv2.flip(self.temperature_upscale, 1)

                chart[self.cam_num].clear()

                chart[self.cam_num].get_xaxis().set_visible(False)
                chart[self.cam_num].get_yaxis().set_visible(False)
                chart[self.cam_num].imshow(self.temperature_upscale, cmap='jet', vmin=min_temp, vmax=max_temp)

                canvas[self.cam_num].draw()
                print(canvas[self.cam_num])
                print(self.temperature_upscale)
                print("canvas drawing")
                print("worker{num} 작동중".format(num = self.cam_num))
                time.sleep(1)
            except:
                print("drawing fail : ", self.cam_num)
worker_display = []

for i in range(len(temperature)):
    worker_display.append(Worker2(cam_num=i))
    time.sleep(0.5)
    # worker2 = Worker2()
    worker_display[i].moveToThread(thread_draw_chart[i])
    thread_draw_chart[i].started.connect(worker_display[i].display_plot)

### canvas End

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1035, 758)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")

        self.Outer_Layout = QtWidgets.QVBoxLayout()
        self.Outer_Layout.setSpacing(0)
        self.Outer_Layout.setContentsMargins(0,0,0,0)
        # self.Outer_Layout.setMargin(0)
        self.Outer_Layout.setObjectName("Outer_Layout")



        self.Line1 = QtWidgets.QHBoxLayout()
        self.Line1.setObjectName("Line1")
        self.Line2 = QtWidgets.QHBoxLayout()
        self.Line2.setObjectName("Line2")
        self.Line3 = QtWidgets.QHBoxLayout()
        self.Line3.setObjectName("Line3")
        self.Line4 = QtWidgets.QHBoxLayout()
        self.Line4.setObjectName("Line4")


        self.CAM_Layout = []
        self.CAM_LHP = []
        self.lbl_CAM_Num = []
        self.chart = []
        self.CAM_RHP = []
        self.lbl_prob_chk = []
        self.lbl_temp = []
        self.lbl_volt1 = []
        self.lbl_volt2 = []
        self.lbl_current = []

        for i in range(camera_num):

            self.CAM_Layout.append(QtWidgets.QHBoxLayout())
            self.CAM_Layout[i].setSpacing(0)
            # self.CAM_Layout[i].setMargin(0)
            self.CAM_Layout[i].setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
            self.CAM_Layout[i].setObjectName("CAM{num}_Layout".format(num=i))
            self.CAM_LHP.append(QtWidgets.QVBoxLayout())
            self.CAM_Layout[i].setSpacing(0)
            self.CAM_Layout[i].setContentsMargins(0,0,0,0)
            self.CAM_LHP[i].setObjectName("CAM{num}_LHP".format(num = i))

            ### cam label
            self.lbl_CAM_Num.append(QtWidgets.QPushButton(self.centralwidget))
            sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
            sizePolicy.setHorizontalStretch(0)
            sizePolicy.setVerticalStretch(0)
            sizePolicy.setHeightForWidth(self.lbl_CAM_Num[i].sizePolicy().hasHeightForWidth())
            self.lbl_CAM_Num[i].setSizePolicy(sizePolicy)
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            font.setItalic(False)
            font.setUnderline(True)
            font.setWeight(75)
            self.lbl_CAM_Num[i].setFont(font)
            # self.lbl_CAM_Num[i].setAlignment(QtCore.Qt.AlignCenter)
            self.lbl_CAM_Num[i].setObjectName("lbl_CAM_Num{num}".format(num = i))
            self.CAM_LHP[i].addWidget(self.lbl_CAM_Num[i])
            #cam label end


            #canvas
            self.chart.append(QtWidgets.QVBoxLayout())
            try:
                self.chart[i].addWidget(canvas[i])
                self.chart[i].setSpacing(0)
                self.chart[i].setContentsMargins(0,0,0,0)

                self.chart[i].setObjectName("chart{num}".format(num = i))
                self.CAM_LHP[i].addLayout(self.chart[i])
                self.CAM_Layout[i].addLayout(self.CAM_LHP[i])
            except:
                print("drawing fail2 : ", i)


            self.CAM_RHP.append(QtWidgets.QVBoxLayout())
            self.CAM_RHP[i].setObjectName("CAM_RHP{num}".format(num = i))
            self.lbl_prob_chk.append(QtWidgets.QLabel(self.centralwidget))
            sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
            sizePolicy.setHorizontalStretch(0)
            sizePolicy.setVerticalStretch(0)
            sizePolicy.setHeightForWidth(self.lbl_prob_chk[i].sizePolicy().hasHeightForWidth())
            self.lbl_prob_chk[i].setSizePolicy(sizePolicy)
            font = QtGui.QFont()
            font.setPointSize(13)
            self.lbl_prob_chk[i].setFont(font)
            self.lbl_prob_chk[i].setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lbl_prob_chk[i].setFrameShape(QtWidgets.QFrame.WinPanel)
            self.lbl_prob_chk[i].setAlignment(QtCore.Qt.AlignCenter)
            self.lbl_prob_chk[i].setObjectName("lbl_prob_chk{num}".format(num = i))
            self.CAM_RHP[i].addWidget(self.lbl_prob_chk[i])
            self.lbl_temp.append(QtWidgets.QLabel(self.centralwidget))
            self.lbl_temp[i].setFrameShape(QtWidgets.QFrame.Box)
            self.lbl_temp[i].setAlignment(QtCore.Qt.AlignCenter)
            self.lbl_temp[i].setObjectName("lbl_temp{num}".format(num = i))
            self.CAM_RHP[i].addWidget(self.lbl_temp[i])
            self.lbl_volt1.append(QtWidgets.QLabel(self.centralwidget))
            self.lbl_volt1[i].setFrameShape(QtWidgets.QFrame.Box)
            self.lbl_volt1[i].setAlignment(QtCore.Qt.AlignCenter)
            self.lbl_volt1[i].setObjectName("lbl_volt1{num}".format(num = i))
            self.CAM_RHP[i].addWidget(self.lbl_volt1[i])
            self.lbl_volt2.append(QtWidgets.QLabel(self.centralwidget))
            self.lbl_volt2[i].setFrameShape(QtWidgets.QFrame.Box)
            self.lbl_volt2[i].setAlignment(QtCore.Qt.AlignCenter)
            self.lbl_volt2[i].setObjectName("lbl_volt2{num}".format(num = i))
            self.CAM_RHP[i].addWidget(self.lbl_volt2[i])
            self.lbl_current.append(QtWidgets.QLabel(self.centralwidget))
            self.lbl_current[i].setFrameShape(QtWidgets.QFrame.Box)
            self.lbl_current[i].setAlignment(QtCore.Qt.AlignCenter)
            self.lbl_current[i].setObjectName("lbl_current{num}".format(num = i))
            self.CAM_RHP[i].addWidget(self.lbl_current[i])
            self.CAM_Layout[i].addLayout(self.CAM_RHP[i])
            self.CAM_Layout[i].setStretch(0, 3)
            self.CAM_Layout[i].setStretch(1, 1)

            # if(i // 4 == 0):
            #     self.Line1.addLayout(self.CAM_Layout[i])
            # elif (i // 4 == 1):
            #     self.Line2.addLayout(self.CAM_Layout[i])
            # elif (i // 4 == 2):
            #     self.Line3.addLayout(self.CAM_Layout[i])
            # elif (i // 4 == 3):
            #     self.Line4.addLayout(self.CAM_Layout[i])

            if(i // 4 == 0):
                self.Line1.addLayout(self.CAM_Layout[i])
            elif (i // 4 == 1):
                self.Line2.addLayout(self.CAM_Layout[i])
            elif (i // 4 == 2):
                self.Line3.addLayout(self.CAM_Layout[i])
            elif (i // 4 == 3):
                self.Line4.addLayout(self.CAM_Layout[i])

        self.Outer_Layout.addLayout(self.Line1)  ### 4번 돌 때만 실행
        self.Outer_Layout.addLayout(self.Line2)  ### 4번 돌 때만 실행
        self.Outer_Layout.addLayout(self.Line3)  ### 4번 돌 때만 실행
        self.Outer_Layout.addLayout(self.Line4)  ### 4번 돌 때만 실행

        self.gridLayout_2.addLayout(self.Outer_Layout, 0, 2, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1035, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        for i in range(camera_num):
            self.lbl_CAM_Num[i].setText(_translate("MainWindow", "CAM{num}".format(num = i + 1)))
            self.lbl_prob_chk[i].setText(_translate("MainWindow", "문제 발생"))
            self.lbl_temp[i].setText(_translate("MainWindow", "{num} No_Signal".format(num = i+1)))
            self.lbl_volt1[i].setText(_translate("MainWindow", "{num} No_Signal".format(num = i + 1)))
            self.lbl_volt2[i].setText(_translate("MainWindow", "{num} No_Signal".format(num = i + 1)))
            self.lbl_current[i].setText(_translate("MainWindow", "{num} No_Signal".format(num = i + 1)))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    thread.start()
    for i in range(len(temperature)):
        time.sleep(0.4)
        try:
            thread_draw_chart[i].start()
        except:
            print("drawing fail")
    ##time term
    time.sleep(10)
    thread_get_data.start()

    # ClientSocket.close()
    sys.exit(app.exec_())

