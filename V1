# -*- coding: utf-8 -*-
"""
Created on Fri Nov 26 18:07:59 2021

@author: USER
"""

import time
import math
import numpy as np
import pickle
import cv2
import socket
import sys

import matplotlib.pyplot as plt

# from IPython import get_ipython
# get_ipython().run_line_magic('matplotlib', 'qt')
plt.ion()

buf_socket_rx = []
for i in range(4):
    buf_socket_rx.append([])
for i in range(4):
    buf_socket_rx[i].append(0xAA)
    for j in range((24 * 32)):
        buf_socket_rx[i].append(0x00)
    buf_socket_rx[i].append(0xBB)

print_mode = 0  # 0 = temperture # 1 = ascii

min_temp = 15.00
max_temp = 35.00

temperature = np.zeros([4, 24, 32])
# heatmap = np.zeros([24*8,32*8,3])


from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
# Qt: v 5.9.7 	PyQt: v 5.9.2
from matplotlib.backends.backend_qt5agg import FigureCanvas as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure

# matplotlib.__version__ 3.4.3

app = QApplication([])

thread = QThread()

ClientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)


class Worker(QObject):
    def __init__(self, parent=None):
        QObject.__init__(self, parent=parent)

    def get_temperature(self):
        global ClientSocket
        global buf_socket_rx
        global temperature
        # global canvas, chart

        ClientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_host = '192.168.0.22'
        server_port = 9999

        rx_array = []

        fps = 0
        now_time = time.time()
        while True:
            try:
                ClientSocket.connect((server_host, server_port))

                rx_time_out = time.time()
                while True:
                    rx_char = ClientSocket.recv(1)
                    if len(rx_char) != 0:
                        rx_array.append(rx_char[0])
                        # print(rx_char[0])
                        rx_time_out = time.time()

                    if len(rx_array) >= (2 * ((24 * 32) + 1 + 2)):
                        if (rx_array[0] * 0x10 + rx_array[1]) == 0xAA and (
                                rx_array[2 * ((24 * 32) + 1 + 1)] * 0x10 + rx_array[
                            2 * ((24 * 32) + 1 + 1) + 1]) == 0xBB and (
                                rx_array[2 * ((24 * 32) + 1)] * 0x10 + rx_array[2 * ((24 * 32) + 1) + 1]) <= 0b1111:
                            # tempture <- rx_array
                            # print((rx_array[2*((24*32)+1)] * 0x10 + rx_array[2*((24*32)+1) + 1]))
                            # print(time.time())

                            slave_address = (rx_array[2 * ((24 * 32) + 1)] * 0x10 + rx_array[2 * ((24 * 32) + 1) + 1])
                            for i in range(24 * 32):
                                buf_socket_rx[slave_address][1 + i] = (
                                            rx_array[2 * (1 + i)] * 0x10 + rx_array[2 * (1 + i) + 1])

                            for h in range(24):
                                for w in range(32):
                                    # temperature[h,w] = (float(buf_socket_rx[0][1+(h*32 + w)])) - 40.0;
                                    temperature[slave_address][h, w] = (float(
                                        buf_socket_rx[slave_address][1 + (h * 32 + w)])) - 40.0;

                            if slave_address == 0b0000:
                                fps = (0.5 * fps) + (0.5 * (1 / (time.time() - now_time)))
                                print(str(fps))
                                now_time = time.time()

                            rx_array = []
                        else:
                            rx_array = rx_array[1:]

                    if time.time() > (rx_time_out + 60.0):
                        break

                ClientSocket.close()
            except:
                print('No reponse from server: ' + str(server_host) + ':' + str(server_port))
                time.sleep(1.0)

                if time.time() > (rx_time_out + 60.0):
                    ClientSocket.close()
                    break


worker = Worker()
worker.moveToThread(thread)
thread.started.connect(worker.get_temperature)

thread2 = QThread()

canvas = FigureCanvas(Figure(figsize=(10, 6)))

chart1 = canvas.figure.add_subplot(1, 1, 1)
# chart_colorbar = canvas.figure.add_subplot(1, 1, 1)

heatmap_zero = np.zeros((24 * 8, 32 * 8))

# colorbar_array = np.arange(min_temp, max_temp + (max_temp - min_temp) * 0.01, (max_temp - min_temp) * 0.01)
# colorbar_array = cv2.resize(colorbar_array, None, fx=3, fy=1, interpolation=cv2.INTER_NEAREST)
# colorbar_array = cv2.flip(colorbar_array, 0);

chart1.clear()
chart1.title.set_text('First Plot')
chart1.get_xaxis().set_visible(False)
chart1.get_yaxis().set_visible(False)
chart1.imshow(heatmap_zero, cmap='jet', vmin=min_temp, vmax=max_temp)


canvas.draw()

class Worker2(QObject):
    def __init__(self, parent=None):
        QObject.__init__(self, parent=parent)

    def display_plot(self):
        # chart1.set_axis_off()
        # chart2.set_axis_off()
        # chart3.set_axis_off()
        # chart4.set_axis_off()

        while True:
            temperature_upscale = cv2.resize(temperature[0], None, fx=8, fy=8, interpolation=cv2.INTER_CUBIC)
            temperature_upscale = cv2.flip(temperature_upscale, 1);

            chart1.clear()
            chart1.title.set_text('First Plot')
            chart1.get_xaxis().set_visible(False)
            chart1.get_yaxis().set_visible(False)
            chart1.imshow(temperature_upscale, cmap='jet', vmin=min_temp, vmax=max_temp)


            #
            # chart_colorbar.clear()
            # chart_colorbar.get_xaxis().set_visible(False)
            # chart_colorbar.get_yaxis().set_visible(False)
            # chart_colorbar.imshow(colorbar_array, cmap='jet', vmin=min_temp, vmax=max_temp)

            canvas.draw()
            print("canvas drawing")
            # chart.plot(temperature_upscale, cmap='jet', vmin = min_temp, vmax = max_temp)

            # plt.imshow(temperature_upscale, cmap='hot', vmin = min_temp, vmax = max_temp)
            # plt.imshow(temperature_upscale, cmap='jet', vmin = min_temp, vmax = max_temp)
            #
            # plt.colorbar()
            # plt.show()
            # plt.pause(0.001)
            # plt.clf()

            # cv2.imshow("image3", heatmap / 255.0

            time.sleep(0.1875)


worker2 = Worker2()
worker2.moveToThread(thread2)
thread2.started.connect(worker2.display_plot)

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.addItem("1")
        self.comboBox.addItem("2")
        self.comboBox.addItem("3")
        self.comboBox.setGeometry(QtCore.QRect(10, 10, 481, 61))
        self.comboBox.setObjectName("comboBox")
        self.Problem_checker = QtWidgets.QLabel(self.centralwidget)
        self.Problem_checker.setGeometry(QtCore.QRect(520, 10, 241, 61))
        self.Problem_checker.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.Problem_checker.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Problem_checker.setAlignment(QtCore.Qt.AlignCenter)
        self.Problem_checker.setObjectName("Problem_checker")
        self.lbl_temp = QtWidgets.QLabel(self.centralwidget)
        self.lbl_temp.setGeometry(QtCore.QRect(510, 150, 91, 71))
        self.lbl_temp.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_temp.setObjectName("lbl_temp")
        self.lbl_volt1 = QtWidgets.QLabel(self.centralwidget)
        self.lbl_volt1.setGeometry(QtCore.QRect(510, 240, 91, 71))
        self.lbl_volt1.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_volt1.setObjectName("lbl_volt1")
        self.lbl_volt2 = QtWidgets.QLabel(self.centralwidget)
        self.lbl_volt2.setGeometry(QtCore.QRect(510, 330, 91, 71))
        self.lbl_volt2.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_volt2.setObjectName("lbl_volt2")
        self.lbl_current = QtWidgets.QLabel(self.centralwidget)
        self.lbl_current.setGeometry(QtCore.QRect(510, 420, 91, 71))
        self.lbl_current.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_current.setObjectName("lbl_current")
        self.val_temp = QtWidgets.QLabel(self.centralwidget)
        self.val_temp.setGeometry(QtCore.QRect(620, 150, 161, 71))
        self.val_temp.setAlignment(QtCore.Qt.AlignCenter)
        self.val_temp.setObjectName("val_temp")
        self.val_volt1 = QtWidgets.QLabel(self.centralwidget)
        self.val_volt1.setGeometry(QtCore.QRect(620, 240, 161, 71))
        self.val_volt1.setAlignment(QtCore.Qt.AlignCenter)
        self.val_volt1.setObjectName("val_volt1")
        self.vel_volt2 = QtWidgets.QLabel(self.centralwidget)
        self.vel_volt2.setGeometry(QtCore.QRect(620, 330, 161, 71))
        self.vel_volt2.setAlignment(QtCore.Qt.AlignCenter)
        self.vel_volt2.setObjectName("vel_volt2")
        self.val_current = QtWidgets.QLabel(self.centralwidget)
        self.val_current.setGeometry(QtCore.QRect(620, 420, 161, 71))
        self.val_current.setAlignment(QtCore.Qt.AlignCenter)
        self.val_current.setObjectName("val_current")

        # self.graph = canvas
        # self.graph

        # main_layout = QGridLayout()
        # main_layout.addWidget(NavigationToolbar(canvas, window), 0, 0)
        # main_layout.addWidget(canvas, 1, 0)
        # window.setLayout(main_layout)

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 80, 501, 461))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.QVlayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.QVlayout.addWidget(canvas)
        self.QVlayout.setContentsMargins(0, 0, 0, 0)
        self.QVlayout.setObjectName("QVlayout")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Problem_checker.setText(_translate("MainWindow", "문제 발생"))
        self.lbl_temp.setText(_translate("MainWindow", "온도"))
        # self.lbl_temp.setText(a)
        self.lbl_volt1.setText(_translate("MainWindow", "전압1"))
        self.lbl_volt2.setText(_translate("MainWindow", "전압2"))
        self.lbl_current.setText(_translate("MainWindow", "전류"))
        self.val_temp.setText(_translate("MainWindow", "도"))
        self.val_volt1.setText(_translate("MainWindow", "볼트"))
        self.vel_volt2.setText(_translate("MainWindow", "볼트"))
        self.val_current.setText(_translate("MainWindow", "암페어"))

print("before thread")

thread.start()
thread2.start()
# window.show()
print("thread start")
# app.exec_()

import sys
app = QtWidgets.QApplication(sys.argv)
print("open app")
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
print("ui setup")
MainWindow.show()
print("mainwin show")
sys.exit(app.exec_())

#######
# window = QWidget()
# window.setWindowTitle('MLX90640 + RS-485 in PyQt5')

main_layout = QGridLayout()
main_layout.addWidget(NavigationToolbar(canvas, window), 0, 0)
main_layout.addWidget(canvas, 1, 0)
window.setLayout(main_layout)
print(hi)
thread.start()
thread2.start()

window.show()

app.exec_()

ClientSocket.close()
